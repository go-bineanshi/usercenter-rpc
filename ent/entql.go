// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/go-bineanshi/usercenter-rpc/ent/predicate"
	"github.com/go-bineanshi/usercenter-rpc/ent/user"
	"github.com/go-bineanshi/usercenter-rpc/ent/userauth"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreatedAt: {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt: {Type: field.TypeTime, Column: user.FieldUpdatedAt},
			user.FieldStatus:    {Type: field.TypeUint8, Column: user.FieldStatus},
			user.FieldNickname:  {Type: field.TypeString, Column: user.FieldNickname},
			user.FieldPassword:  {Type: field.TypeString, Column: user.FieldPassword},
			user.FieldAvater:    {Type: field.TypeString, Column: user.FieldAvater},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   userauth.Table,
			Columns: userauth.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: userauth.FieldID,
			},
		},
		Type: "UserAuth",
		Fields: map[string]*sqlgraph.FieldSpec{
			userauth.FieldCreatedAt: {Type: field.TypeTime, Column: userauth.FieldCreatedAt},
			userauth.FieldUpdatedAt: {Type: field.TypeTime, Column: userauth.FieldUpdatedAt},
			userauth.FieldStatus:    {Type: field.TypeUint8, Column: userauth.FieldStatus},
			userauth.FieldUserID:    {Type: field.TypeUint64, Column: userauth.FieldUserID},
			userauth.FieldProvider:  {Type: field.TypeEnum, Column: userauth.FieldProvider},
			userauth.FieldAccount:   {Type: field.TypeString, Column: userauth.FieldAccount},
		},
	}
	graph.MustAddE(
		"auths",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthsTable,
			Columns: []string{user.AuthsColumn},
			Bidi:    false,
		},
		"User",
		"UserAuth",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userauth.UserTable,
			Columns: []string{userauth.UserColumn},
			Bidi:    false,
		},
		"UserAuth",
		"User",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *UserFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *UserFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(user.FieldStatus))
}

// WhereNickname applies the entql string predicate on the nickname field.
func (f *UserFilter) WhereNickname(p entql.StringP) {
	f.Where(p.Field(user.FieldNickname))
}

// WherePassword applies the entql string predicate on the password field.
func (f *UserFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(user.FieldPassword))
}

// WhereAvater applies the entql string predicate on the avater field.
func (f *UserFilter) WhereAvater(p entql.StringP) {
	f.Where(p.Field(user.FieldAvater))
}

// WhereHasAuths applies a predicate to check if query has an edge auths.
func (f *UserFilter) WhereHasAuths() {
	f.Where(entql.HasEdge("auths"))
}

// WhereHasAuthsWith applies a predicate to check if query has an edge auths with a given conditions (other predicates).
func (f *UserFilter) WhereHasAuthsWith(preds ...predicate.UserAuth) {
	f.Where(entql.HasEdgeWith("auths", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uaq *UserAuthQuery) addPredicate(pred func(s *sql.Selector)) {
	uaq.predicates = append(uaq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserAuthQuery builder.
func (uaq *UserAuthQuery) Filter() *UserAuthFilter {
	return &UserAuthFilter{config: uaq.config, predicateAdder: uaq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserAuthMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserAuthMutation builder.
func (m *UserAuthMutation) Filter() *UserAuthFilter {
	return &UserAuthFilter{config: m.config, predicateAdder: m}
}

// UserAuthFilter provides a generic filtering capability at runtime for UserAuthQuery.
type UserAuthFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserAuthFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *UserAuthFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(userauth.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserAuthFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(userauth.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserAuthFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(userauth.FieldUpdatedAt))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *UserAuthFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(userauth.FieldStatus))
}

// WhereUserID applies the entql uint64 predicate on the user_id field.
func (f *UserAuthFilter) WhereUserID(p entql.Uint64P) {
	f.Where(p.Field(userauth.FieldUserID))
}

// WhereProvider applies the entql string predicate on the provider field.
func (f *UserAuthFilter) WhereProvider(p entql.StringP) {
	f.Where(p.Field(userauth.FieldProvider))
}

// WhereAccount applies the entql string predicate on the account field.
func (f *UserAuthFilter) WhereAccount(p entql.StringP) {
	f.Where(p.Field(userauth.FieldAccount))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *UserAuthFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *UserAuthFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
