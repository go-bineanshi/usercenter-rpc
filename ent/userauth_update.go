// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-bineanshi/usercenter-rpc/ent/predicate"
	"github.com/go-bineanshi/usercenter-rpc/ent/property"
	"github.com/go-bineanshi/usercenter-rpc/ent/user"
	"github.com/go-bineanshi/usercenter-rpc/ent/userauth"
)

// UserAuthUpdate is the builder for updating UserAuth entities.
type UserAuthUpdate struct {
	config
	hooks    []Hook
	mutation *UserAuthMutation
}

// Where appends a list predicates to the UserAuthUpdate builder.
func (uau *UserAuthUpdate) Where(ps ...predicate.UserAuth) *UserAuthUpdate {
	uau.mutation.Where(ps...)
	return uau
}

// SetUpdatedAt sets the "updated_at" field.
func (uau *UserAuthUpdate) SetUpdatedAt(t time.Time) *UserAuthUpdate {
	uau.mutation.SetUpdatedAt(t)
	return uau
}

// SetStatus sets the "status" field.
func (uau *UserAuthUpdate) SetStatus(u uint8) *UserAuthUpdate {
	uau.mutation.ResetStatus()
	uau.mutation.SetStatus(u)
	return uau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uau *UserAuthUpdate) SetNillableStatus(u *uint8) *UserAuthUpdate {
	if u != nil {
		uau.SetStatus(*u)
	}
	return uau
}

// AddStatus adds u to the "status" field.
func (uau *UserAuthUpdate) AddStatus(u int8) *UserAuthUpdate {
	uau.mutation.AddStatus(u)
	return uau
}

// ClearStatus clears the value of the "status" field.
func (uau *UserAuthUpdate) ClearStatus() *UserAuthUpdate {
	uau.mutation.ClearStatus()
	return uau
}

// SetUserID sets the "user_id" field.
func (uau *UserAuthUpdate) SetUserID(u uint64) *UserAuthUpdate {
	uau.mutation.SetUserID(u)
	return uau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uau *UserAuthUpdate) SetNillableUserID(u *uint64) *UserAuthUpdate {
	if u != nil {
		uau.SetUserID(*u)
	}
	return uau
}

// ClearUserID clears the value of the "user_id" field.
func (uau *UserAuthUpdate) ClearUserID() *UserAuthUpdate {
	uau.mutation.ClearUserID()
	return uau
}

// SetProvider sets the "provider" field.
func (uau *UserAuthUpdate) SetProvider(pr property.Provider) *UserAuthUpdate {
	uau.mutation.SetProvider(pr)
	return uau
}

// SetAccount sets the "account" field.
func (uau *UserAuthUpdate) SetAccount(s string) *UserAuthUpdate {
	uau.mutation.SetAccount(s)
	return uau
}

// SetUser sets the "user" edge to the User entity.
func (uau *UserAuthUpdate) SetUser(u *User) *UserAuthUpdate {
	return uau.SetUserID(u.ID)
}

// Mutation returns the UserAuthMutation object of the builder.
func (uau *UserAuthUpdate) Mutation() *UserAuthMutation {
	return uau.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uau *UserAuthUpdate) ClearUser() *UserAuthUpdate {
	uau.mutation.ClearUser()
	return uau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uau *UserAuthUpdate) Save(ctx context.Context) (int, error) {
	uau.defaults()
	return withHooks(ctx, uau.sqlSave, uau.mutation, uau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uau *UserAuthUpdate) SaveX(ctx context.Context) int {
	affected, err := uau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uau *UserAuthUpdate) Exec(ctx context.Context) error {
	_, err := uau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uau *UserAuthUpdate) ExecX(ctx context.Context) {
	if err := uau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uau *UserAuthUpdate) defaults() {
	if _, ok := uau.mutation.UpdatedAt(); !ok {
		v := userauth.UpdateDefaultUpdatedAt()
		uau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uau *UserAuthUpdate) check() error {
	if v, ok := uau.mutation.Provider(); ok {
		if err := userauth.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "UserAuth.provider": %w`, err)}
		}
	}
	if v, ok := uau.mutation.Account(); ok {
		if err := userauth.AccountValidator(v); err != nil {
			return &ValidationError{Name: "account", err: fmt.Errorf(`ent: validator failed for field "UserAuth.account": %w`, err)}
		}
	}
	return nil
}

func (uau *UserAuthUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userauth.Table, userauth.Columns, sqlgraph.NewFieldSpec(userauth.FieldID, field.TypeUint64))
	if ps := uau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uau.mutation.UpdatedAt(); ok {
		_spec.SetField(userauth.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uau.mutation.Status(); ok {
		_spec.SetField(userauth.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := uau.mutation.AddedStatus(); ok {
		_spec.AddField(userauth.FieldStatus, field.TypeUint8, value)
	}
	if uau.mutation.StatusCleared() {
		_spec.ClearField(userauth.FieldStatus, field.TypeUint8)
	}
	if value, ok := uau.mutation.Provider(); ok {
		_spec.SetField(userauth.FieldProvider, field.TypeEnum, value)
	}
	if value, ok := uau.mutation.Account(); ok {
		_spec.SetField(userauth.FieldAccount, field.TypeString, value)
	}
	if uau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userauth.UserTable,
			Columns: []string{userauth.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userauth.UserTable,
			Columns: []string{userauth.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userauth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uau.mutation.done = true
	return n, nil
}

// UserAuthUpdateOne is the builder for updating a single UserAuth entity.
type UserAuthUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserAuthMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (uauo *UserAuthUpdateOne) SetUpdatedAt(t time.Time) *UserAuthUpdateOne {
	uauo.mutation.SetUpdatedAt(t)
	return uauo
}

// SetStatus sets the "status" field.
func (uauo *UserAuthUpdateOne) SetStatus(u uint8) *UserAuthUpdateOne {
	uauo.mutation.ResetStatus()
	uauo.mutation.SetStatus(u)
	return uauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uauo *UserAuthUpdateOne) SetNillableStatus(u *uint8) *UserAuthUpdateOne {
	if u != nil {
		uauo.SetStatus(*u)
	}
	return uauo
}

// AddStatus adds u to the "status" field.
func (uauo *UserAuthUpdateOne) AddStatus(u int8) *UserAuthUpdateOne {
	uauo.mutation.AddStatus(u)
	return uauo
}

// ClearStatus clears the value of the "status" field.
func (uauo *UserAuthUpdateOne) ClearStatus() *UserAuthUpdateOne {
	uauo.mutation.ClearStatus()
	return uauo
}

// SetUserID sets the "user_id" field.
func (uauo *UserAuthUpdateOne) SetUserID(u uint64) *UserAuthUpdateOne {
	uauo.mutation.SetUserID(u)
	return uauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uauo *UserAuthUpdateOne) SetNillableUserID(u *uint64) *UserAuthUpdateOne {
	if u != nil {
		uauo.SetUserID(*u)
	}
	return uauo
}

// ClearUserID clears the value of the "user_id" field.
func (uauo *UserAuthUpdateOne) ClearUserID() *UserAuthUpdateOne {
	uauo.mutation.ClearUserID()
	return uauo
}

// SetProvider sets the "provider" field.
func (uauo *UserAuthUpdateOne) SetProvider(pr property.Provider) *UserAuthUpdateOne {
	uauo.mutation.SetProvider(pr)
	return uauo
}

// SetAccount sets the "account" field.
func (uauo *UserAuthUpdateOne) SetAccount(s string) *UserAuthUpdateOne {
	uauo.mutation.SetAccount(s)
	return uauo
}

// SetUser sets the "user" edge to the User entity.
func (uauo *UserAuthUpdateOne) SetUser(u *User) *UserAuthUpdateOne {
	return uauo.SetUserID(u.ID)
}

// Mutation returns the UserAuthMutation object of the builder.
func (uauo *UserAuthUpdateOne) Mutation() *UserAuthMutation {
	return uauo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uauo *UserAuthUpdateOne) ClearUser() *UserAuthUpdateOne {
	uauo.mutation.ClearUser()
	return uauo
}

// Where appends a list predicates to the UserAuthUpdate builder.
func (uauo *UserAuthUpdateOne) Where(ps ...predicate.UserAuth) *UserAuthUpdateOne {
	uauo.mutation.Where(ps...)
	return uauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uauo *UserAuthUpdateOne) Select(field string, fields ...string) *UserAuthUpdateOne {
	uauo.fields = append([]string{field}, fields...)
	return uauo
}

// Save executes the query and returns the updated UserAuth entity.
func (uauo *UserAuthUpdateOne) Save(ctx context.Context) (*UserAuth, error) {
	uauo.defaults()
	return withHooks(ctx, uauo.sqlSave, uauo.mutation, uauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uauo *UserAuthUpdateOne) SaveX(ctx context.Context) *UserAuth {
	node, err := uauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uauo *UserAuthUpdateOne) Exec(ctx context.Context) error {
	_, err := uauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uauo *UserAuthUpdateOne) ExecX(ctx context.Context) {
	if err := uauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uauo *UserAuthUpdateOne) defaults() {
	if _, ok := uauo.mutation.UpdatedAt(); !ok {
		v := userauth.UpdateDefaultUpdatedAt()
		uauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uauo *UserAuthUpdateOne) check() error {
	if v, ok := uauo.mutation.Provider(); ok {
		if err := userauth.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "UserAuth.provider": %w`, err)}
		}
	}
	if v, ok := uauo.mutation.Account(); ok {
		if err := userauth.AccountValidator(v); err != nil {
			return &ValidationError{Name: "account", err: fmt.Errorf(`ent: validator failed for field "UserAuth.account": %w`, err)}
		}
	}
	return nil
}

func (uauo *UserAuthUpdateOne) sqlSave(ctx context.Context) (_node *UserAuth, err error) {
	if err := uauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userauth.Table, userauth.Columns, sqlgraph.NewFieldSpec(userauth.FieldID, field.TypeUint64))
	id, ok := uauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserAuth.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userauth.FieldID)
		for _, f := range fields {
			if !userauth.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userauth.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uauo.mutation.UpdatedAt(); ok {
		_spec.SetField(userauth.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uauo.mutation.Status(); ok {
		_spec.SetField(userauth.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := uauo.mutation.AddedStatus(); ok {
		_spec.AddField(userauth.FieldStatus, field.TypeUint8, value)
	}
	if uauo.mutation.StatusCleared() {
		_spec.ClearField(userauth.FieldStatus, field.TypeUint8)
	}
	if value, ok := uauo.mutation.Provider(); ok {
		_spec.SetField(userauth.FieldProvider, field.TypeEnum, value)
	}
	if value, ok := uauo.mutation.Account(); ok {
		_spec.SetField(userauth.FieldAccount, field.TypeString, value)
	}
	if uauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userauth.UserTable,
			Columns: []string{userauth.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userauth.UserTable,
			Columns: []string{userauth.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserAuth{config: uauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userauth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uauo.mutation.done = true
	return _node, nil
}
