// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: usercenter.proto

package usercenter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegisterLoginRpcClient is the client API for RegisterLoginRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisterLoginRpcClient interface {
	RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*UserInfo, error)
	LoginUser(ctx context.Context, in *LoginUserReq, opts ...grpc.CallOption) (*UserInfo, error)
	ChangeUserPassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*BaseMessage, error)
}

type registerLoginRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisterLoginRpcClient(cc grpc.ClientConnInterface) RegisterLoginRpcClient {
	return &registerLoginRpcClient{cc}
}

func (c *registerLoginRpcClient) RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/usercenter.RegisterLoginRpc/registerUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerLoginRpcClient) LoginUser(ctx context.Context, in *LoginUserReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/usercenter.RegisterLoginRpc/loginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerLoginRpcClient) ChangeUserPassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*BaseMessage, error) {
	out := new(BaseMessage)
	err := c.cc.Invoke(ctx, "/usercenter.RegisterLoginRpc/changeUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisterLoginRpcServer is the server API for RegisterLoginRpc service.
// All implementations must embed UnimplementedRegisterLoginRpcServer
// for forward compatibility
type RegisterLoginRpcServer interface {
	RegisterUser(context.Context, *RegisterUserReq) (*UserInfo, error)
	LoginUser(context.Context, *LoginUserReq) (*UserInfo, error)
	ChangeUserPassword(context.Context, *ChangePasswordReq) (*BaseMessage, error)
	mustEmbedUnimplementedRegisterLoginRpcServer()
}

// UnimplementedRegisterLoginRpcServer must be embedded to have forward compatible implementations.
type UnimplementedRegisterLoginRpcServer struct {
}

func (UnimplementedRegisterLoginRpcServer) RegisterUser(context.Context, *RegisterUserReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedRegisterLoginRpcServer) LoginUser(context.Context, *LoginUserReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedRegisterLoginRpcServer) ChangeUserPassword(context.Context, *ChangePasswordReq) (*BaseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserPassword not implemented")
}
func (UnimplementedRegisterLoginRpcServer) mustEmbedUnimplementedRegisterLoginRpcServer() {}

// UnsafeRegisterLoginRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisterLoginRpcServer will
// result in compilation errors.
type UnsafeRegisterLoginRpcServer interface {
	mustEmbedUnimplementedRegisterLoginRpcServer()
}

func RegisterRegisterLoginRpcServer(s grpc.ServiceRegistrar, srv RegisterLoginRpcServer) {
	s.RegisterService(&RegisterLoginRpc_ServiceDesc, srv)
}

func _RegisterLoginRpc_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterLoginRpcServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usercenter.RegisterLoginRpc/registerUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterLoginRpcServer).RegisterUser(ctx, req.(*RegisterUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterLoginRpc_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterLoginRpcServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usercenter.RegisterLoginRpc/loginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterLoginRpcServer).LoginUser(ctx, req.(*LoginUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterLoginRpc_ChangeUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterLoginRpcServer).ChangeUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usercenter.RegisterLoginRpc/changeUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterLoginRpcServer).ChangeUserPassword(ctx, req.(*ChangePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterLoginRpc_ServiceDesc is the grpc.ServiceDesc for RegisterLoginRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegisterLoginRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usercenter.RegisterLoginRpc",
	HandlerType: (*RegisterLoginRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "registerUser",
			Handler:    _RegisterLoginRpc_RegisterUser_Handler,
		},
		{
			MethodName: "loginUser",
			Handler:    _RegisterLoginRpc_LoginUser_Handler,
		},
		{
			MethodName: "changeUserPassword",
			Handler:    _RegisterLoginRpc_ChangeUserPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usercenter.proto",
}
